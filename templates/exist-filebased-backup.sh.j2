#!/bin/sh

usage() {
    cat <<EOF
Usage: $0 [-f] [-s] [-v] [-d bakdir] [-i instname] [-t baktype] [-u instuser]
       $0 [-h]

Options:
 -d  place backups below this directory (default ${BACKUP_DIR})
 -f  force, skip "proceed?" question
 -h  help (this text)
 -i  backup the named exist-db instance (default ${INSTNAME})
 -s  log to syslog
 -t  backup type (rsync/tgz/fast, default ${TYPE})
 -u  exist-db instance user (default ${INSTUSER})
 -v  verbose
EOF
}

# defaults
INSTNAME={{ exist_instname }}
INSTUSER={{ exist_instuser }}
EXIST_BASEDIR={{ exist_home }}
BACKUP_DIR=${EXIST_BASEDIR}/backup
TYPE=rsync
DEAD_CHECK_SLEEP=5
FORCE=
FAST=
DATESTR=
VERBOSE=
SYSLOG=
LOGFILE=`mktemp`
export VERBOSE SYSLOG LOGFILE

trap "rm -rf $LOGFILE" EXIT

while getopts "d:fDi:st:u:v" PARAM; do
    case "${PARAM}" in
	d) BACKUP_DIR=$OPTARG;;
	f) FORCE=yes;;
	D) DATESTR=`date +'%Y%m%d%H%M'`;;
	i) INSTNAME=$OPTARG;;
	s) SYSLOG=yes;;
	t) TYPE=$OPTARG;;
	u) INSTUSER=$OPTARG;;
	v) VERBOSE=yes;;
        *) usage; exit 1;;
    esac
done
shift $(($OPTIND - 1))

case "$TYPE" in
    rsync|fast)  BACKUP_TARGET=${BACKUP_DIR}/${INSTNAME} ;;
    tgz)         BACKUP_TARGET=${BACKUP_DIR}/${INSTNAME}.tgz ;;
    *)           logerr 1 "Unsupported format: \"$TYPE\"" ;;
esac

BACKUP_SRCDIR=${EXIST_BASEDIR}/${INSTNAME}

# support files outside of exist-db tree
SUPP_FILES="\
 /etc/init.d/${INSTNAME} \
 /etc/systemd/system/${INSTNAME}.service \
 /etc/ansible/facts.d/${INSTNAME}.fact \
 /etc/ansible/facts.d/${INSTNAME}.pl \
"

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/common-shfuncs.sh

dumpconf() {
    echo "INSTNAME: $INSTNAME"
    echo "BACKUP_DIR: $BACKUP_DIR"
    echo "BACKUP_SRCDIR: $BACKUP_SRCDIR"
    echo "BACKUP_TARGET: $BACKUP_TARGET"
    echo "TYPE: $TYPE"
    echo "FORCE: $FORCE"
    echo "DATESTR: $DATESTR"
    echo "VERBOSE: $VERBOSE"
    echo "SYSLOG: $SYSLOG"
    echo "SCRIPT_DIR: $SCRIPT_DIR"
}
#dumpconf

which psexist >/dev/null || logerr 1 "ERROR: psexist command not found, exiting"

logmsg "Backing up instance \"$INSTNAME\" ${BACKUP_SRCDIR} to ${BACKUP_TARGET} ..."
shutdown_exist

# ensure backup dir exists
install -d ${BACKUP_DIR} \
    || logerr 2 "ERROR: failed to create backup dir ${BACKUP_DIR}: $!"


if [ "$TYPE" = rsync ]; then
    logmsg "Start rsync backup"
    rsync -a --ignore-missing-args ${EXIST_BASEDIR}/${INSTNAME} ${SUPP_FILES} ${BACKUP_TARGET}/
    logmsg "Rsync backup dir is ${BACKUP_TARGET}"
    logmsg "`du -sh ${BACKUP_TARGET}`"
elif [ "$TYPE" = tgz ]; then
    logmsg "Start tgz backup"
    tar zcf $BACKUP_TARGET -C "${EXIST_BASEDIR}" ${INSTNAME}/ ${SUPP_FILES} 2>/dev/null
    logmsg "Backup tgz file is ${BACKUP_TARGET}"
    logmsg "`ls -lh ${BACKUP_TARGET}`"
elif [ "$TYPE" = fast ]; then
    if [ -z "$FORCE" ]; then
	echo -n "This will MOVE the exist instance to the backup. Proceed? [yN] "
	read move
	case "$move" in
	    y|Y) :;;
	    *) logerr 1 "Aborted by user"; exit 1;;
	esac
    fi
    logerr 1 "I can't let you do that, Dave"
    #mv ${EXIST_BASEDIR}/${INSTNAME} ${BACKUP_TARGET}/
    #mv ${SUPP_FILES} ${BACKUP_TARGET}/
    #logmsg "Fast-moved backup dir is ${BACKUP_TARGET}"
fi

# move restore logfile to eXist log dir
[ -n "$LOGFILE" ] \
    && mv $LOGFILE ${EXIST_BASEDIR}/${INSTNAME}/logs/backup-${TYPE}.log \
    && chown ${INSTUSER} ${EXIST_BASEDIR}/${INSTNAME}/logs/backup-${TYPE}.log
