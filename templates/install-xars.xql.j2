xquery version "3.1";

declare namespace expath="http://expath.org/ns/pkg";
declare namespace repo="http://exist-db.org/xquery/repo";

(: XQuery to install one or more Xar packages into eXist-db       :)
(: Xar files are expected in directory $EXIST_HOME/xars/          :)

(: ==== CONFIGURATION ==== :)

(: comma separated list of xar file names as strings              :)
(:     ("foo-1.0.xar,"bar-1.1.0.xar")                             :)
declare variable $local:xarlist := ("{{ exist_custom_xarlist | join("\", \"") }}");

(: force installation even if version numbers are identical?      :)
(:     boolean string values "true" or "false"                    :)
declare variable $local:force-install := "{{ xar_default.force | default('false') }}";

(: ==== UTIL FUNCTIONS ==== :)

(: util to peek into expath:package data of yet uninstalled xar files.
 : stolen from eXide, thanks :)
declare function local:get-descriptors($zipPath) {
    let $binary := util:binary-doc($zipPath)
    return
        if (exists($binary)) then
            let $dataCb := function($path as xs:anyURI, $type as xs:string, $data as item()?, $param as item()*) { $data }
            let $entryCb := function($path as xs:anyURI, $type as xs:string, $param as item()*) { ($path = "expath-pkg.xml") or ($path = "repo.xml") }
            return
                compression:unzip($binary, $entryCb, (), $dataCb, ())
        else
            util:log('info', "file not found: " || $zipPath)
};

(: helper functions to compare version number strings.
 : stolen from packagemanager, thanks, very nice :)
declare function local:is-newer($available as xs:string, $installed as xs:string) as xs:boolean {
    let $verInstalled := tokenize($installed, "\.")
    let $verAvailable := tokenize($available, "\.")
    return
        local:compare-versions($verInstalled, $verAvailable)
};
declare function local:compare-versions($installed as xs:string*, $available as xs:string*) as xs:boolean {
    if (empty($installed)) then
        exists($available)
    else if (empty($available)) then
        false()
    else if (head($available) = head($installed)) then
        local:compare-versions(tail($installed), tail($available))
    else
        number(head($available)) > number(head($installed))
};


(: helper functions to get info about installed xar with $name :)
declare variable $local:collections := (
    collection("/db/apps"),
    collection("/db/system/repo")
);
declare function local:get-expath-package ($name as xs:string) as item()? {
    let $collections := $local:collections//expath:package[./@name=$name]
    return $collections
};
declare function local:get-repo-meta ($name as xs:string) as element(meta)? {
    let $expath-package := local:get-expath-package($name)
    let $collection :=
        if (count($expath-package)=1) then (
            $expath-package
                => util:collection-name()
                => collection()
        ) else (
            ()
        )
    return $collection//repo:meta
};

(: deploy a single xar file, uninstall older first if needed :)
declare function local:deploy-xar($xar) {
    let $fname := "{{ exist_path }}/xars/" || $xar

    let $xarfile :=  
        if (file:exists($fname) and file:is-readable($fname)) then ( 
            file:read-binary($fname)
        ) else ( 
            let $log := util:log('info', "install-xars: file " || $fname || " does not exist or is not readable")
            return ()
        )

    (: $stored is logically true if the xar could be saved into eXist DB :)
    let $stored := 
        if (not(empty($xarfile))) then ( 
            xmldb:store("/db/temp", $xar, $xarfile)
        ) else ( 
            let $log := util:log('info', "install-xars: not storing empty xar file " || $fname)
            return ()
        )

    let $descriptors := local:get-descriptors("/db/temp/" || $xar)
    let $expath := $descriptors/expath:package
    let $name := $expath/@name
    let $newversion := $expath/@version/string()
    let $installed := local:get-expath-package($name)
    let $oldversion := $installed/@version/string()
    let $log := util:log('info', "install-xars: xar " || $xar || ", fname: " || $fname || ", uri: " || $name || ", oldversion: " || $oldversion || ", newversion: " || $newversion)

    let $oldrepo := local:get-repo-meta($name)
    let $oldcommitid := $oldrepo/@commit-id/string()
    let $oldcommittime := $oldrepo/@commit-time/string()
    let $oldconfigid := $oldrepo/@config-id/string()
    let $oldconfigtime := $oldrepo/@config-time/string()

    let $newrepo := $descriptors/repo:meta
    let $newcommitid := $newrepo/@commit-id/string()
    let $newcommittime := $newrepo/@commit-time/string()
    let $newconfigid := $newrepo/@config-id/string()
    let $newconfigtime := $newrepo/@config-time/string()

    let $log := util:log('info', 'OLD: ' || $oldversion || ' ' || $oldcommitid || ' ' || $oldconfigid)
    let $log := util:log('info', 'NEW: ' || $newversion || ' ' || $newcommitid || ' ' || $newconfigid)

    let $toinstall :=
        if (not(boolean($installed))) then (
            let $log := util:log('info', "install-xars: xar " || $xar || " is not installed")
            return true()
        ) else if ($local:force-install = "true") then (
            let $log := util:log('info', "install-xars: forcing uninstall of existing version " || $oldversion || ", uninstalling " || $name)
            let $undep := repo:undeploy($name)
            return repo:remove($name)
        ) else if ((not(empty($newcommitid)) or not(empty($newconfigid))) and (not($newcommitid = $oldcommitid) or not($newconfigid = $oldconfigid))) then (
            let $log := util:log('info', 'install-xars: commit-id or config-id mismatch, re-installing ' || $xar)
            let $undep := repo:undeploy($name)
            return repo:remove($name)
        ) else ( 
            if (local:is-newer($newversion, $oldversion)) then (
                let $log := util:log('info', "install-xars: found older version " || $oldversion || ", uninstalling " || $name)
                let $undep := repo:undeploy($name)
                return repo:remove($name)
            ) else ( 
                let $log := util:log('info', "install-xars: xar " || $xar || " is not newer than installed version")
                return false()
            )
        )

    return
        if (boolean($toinstall)) then (
            let $log := util:log('info', "install-xars: installing " || $xar)
            return repo:install-and-deploy-from-db("/db/temp/" || $xar)
        ) else ( 
            false()
        )
};


(: create "/db/temp", used during xar installation :)
let $mkcoll :=
    if (not(xmldb:collection-available("/db/temp"))) then (
        xmldb:create-collection("/db", "temp")
    ) else ()


(: ==== MAIN ==== :)

for $xar in ($local:xarlist)
return local:deploy-xar($xar)
